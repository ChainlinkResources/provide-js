export declare class Goldmine {
    private static readonly DEFAULT_HOST;
    private client;
    constructor(token: string, scheme?: string, host?: string, path?: string);
    fetchBridges(params?: object): Promise<any>;
    fetchBridgeDetails(bridgeId: string): Promise<any>;
    createBridge(params: object): Promise<any>;
    fetchConnectors(params?: object): Promise<any>;
    fetchConnectorDetails(connectorId: string): Promise<any>;
    createConnector(params: object): Promise<any>;
    deleteConnector(connectorId: string): Promise<any>;
    fetchContracts(params?: object): Promise<any>;
    fetchContractDetails(contractId: string): Promise<any>;
    createContract(params: object): Promise<any>;
    executeContract(contractId: string, params: object): Promise<any>;
    fetchNetworks(params?: object): Promise<any>;
    createNetwork(params: object): Promise<any>;
    updateNetwork(networkId: string, params: object): Promise<any>;
    fetchNetworkDetails(networkId: string): Promise<any>;
    fetchNetworkAccounts(networkId: string, params: object): Promise<any>;
    fetchNetworkBlocks(networkId: string, params: object): Promise<any>;
    fetchNetworkBridges(networkId: string, params: object): Promise<any>;
    fetchNetworkConnectors(networkId: string, params: object): Promise<any>;
    fetchNetworkContracts(networkId: string, params: object): Promise<any>;
    fetchNetworkContractDetails(networkId: string, contractId: string): Promise<any>;
    fetchNetworkOracles(networkId: string, params: object): Promise<any>;
    fetchNetworkTokens(networkId: string, params: object): Promise<any>;
    network_transactions(networkId: string, params: object): Promise<any>;
    fetchNetworkTransactionDetails(networkId: string, transactionId: string): Promise<any>;
    fetchNetworkStatus(networkId: string): Promise<any>;
    fetchNetworkNodes(networkId: string, params?: object): Promise<any>;
    createNetworkNode(networkId: string, params: object): Promise<any>;
    fetchNetworkNodeDetails(networkId: string, nodeId: string): Promise<any>;
    fetchNetworkNodeLogs(networkId: string, nodeId: string): Promise<any>;
    deleteNetworkNode(networkId: string, nodeId: string): Promise<any>;
    fetchOracles(params?: object): Promise<any>;
    fetchOracleDetails(oracleId: string): Promise<any>;
    createOracle(params: object): Promise<any>;
    fetchTokens(params?: object): Promise<any>;
    fetchTokenDetails(tokenId: string): Promise<any>;
    createToken(params: object): Promise<any>;
    createTransaction(params: object): Promise<any>;
    fetchTransactions(params?: object): Promise<any>;
    fetchTransactionDetails(transactionId: string): Promise<any>;
    fetchWalletBalance(walletId: string, tokenId: string): Promise<any>;
    fetchWallets(params?: object): Promise<any>;
    fetchWalletDetails(walletId: string): Promise<any>;
    createWallet(params: object): Promise<any>;
}
